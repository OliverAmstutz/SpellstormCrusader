name: Battle of the Ancient Spirits CI/CD/CD

on:
  pull_request: {}
  push:
    branches:
      - '**'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  
jobs:

  ###################################
  #         Test Application        #
  ###################################
  testBotAS:
    name: Test BotAS âœ¨
    runs-on: self-hosted
    strategy:
      fail-fast: true
      matrix:
        projectPath:
          - BotAS
        unityVersion:
          - 6000.0.25f1
    steps:
    
      ###########################
      #         Checkout        #
      ###########################
      - name: Checkout the Repository
        id: checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      ###########################
      #          Cache          #
      ###########################
      # - name: Set Cache Directory Ownership
        # run: sudo chown -R $USER:$USER
      # - name: Print Current Working Directory
        # run: echo "Current working directory is $(pwd)"
        
      # - name: List Contents of ${{ matrix.projectPath }}
        # run: |
            # echo "Listing contents of ${{ matrix.projectPath }}:"
            # ls -la ${{ matrix.projectPath }}
      
      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      
      - name: Print Current Working Directory
        run: echo "Current working directory is $(pwd)"

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v4
        with:
          path: ${{matrix.projectPath}}/Library
          key: Library-${{matrix.projectPath}}-
          restore-keys: |
            Library-${{matrix.projectPath}}-
            Library-
            
      ###########################
      #          Build          #
      ###########################     
      - name: Check Memory and Disk Space Before Unity Test
        run: |
          echo "Memory Usage:"
          free -h
          echo "Disk Usage:"
          df -h
      
      - uses: game-ci/unity-test-runner@v4
        id: myTestStep
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ${{matrix.projectPath}}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check Memory and Disk Space After Unity Test
        run: |
          echo "Memory Usage:"
          free -h
          echo "Disk Usage:"
          df -h
        
      - name: Check Memory and Disk Space on Failure
        if: failure()
        run: |
          echo "Memory Usage:"
          free -h
          echo "Disk Usage:"
          df -h

      ######################################
      #          Upload Test Result        #
      ######################################
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Test-Results
          path: ${{ steps.myTestStep.outputs.artifactsPath }}
          if-no-files-found: error
          retention-days: 5
          
      # ########################################
      # #          Upload Code Coverage        #
      # ########################################
      # # - name: Save Coverage Report
        # # uses: actions/upload-artifact@v4
        # # with:
          # # name: Coverage-Results
          # # path: ${{ steps.myTestStep.outputs.coveragePath }}
          # # if-no-files-found: error
          # # retention-days: 90



















  # ####################################
  # #         Build Application        #
  # ####################################
  # buildBotAS:
    # needs: testBotAS
    # name: Build for ${{ matrix.targetPlatform }}
    # runs-on: self-hosted
    # strategy:
      # fail-fast: true
      # matrix:
        # projectPath:
          # - BotAS
        # targetPlatform:
          # - StandaloneWindows64
          
    # steps: 
      # ###########################
      # #         Checkout        #
      # ###########################
      # - name: Checkout code
        # uses: actions/checkout@v4
        # with:
          # lfs: true

      # - name: Create LFS file list
        # run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      # ###########################
      # #          Cache          #
      # ###########################
      # - name: Restore LFS cache
        # uses: actions/cache@v4
        # id: lfs-cache
        # with:
          # path: .git/lfs
          # key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      # - name: Git LFS Pull
        # run: |
          # git lfs pull
          # git add .
          # git reset --hard

      # - name: Restore Library cache
        # uses: actions/cache@v4
        # with:
          # path: ${{matrix.projectPath}}/Library
          # key: Library-${{matrix.projectPath}}-
          # restore-keys: |
            # Library-${{matrix.projectPath}}-
            # Library-
            
      # ###########################
      # #          Build          #
      # ###########################
      # - uses: game-ci/unity-builder@v4
        # env:
          # UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          # UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          # UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        # with:
          # unityVersion: ${{ matrix.unityVersion }}
          # projectPath: ${{ matrix.projectPath }}
          # targetPlatform: ${{ matrix.targetPlatform }}
          
          
      # ###########################
      # #          Upload         #
      # ###########################
      # - uses: actions/upload-artifact@v4
        # with:
          # name: Build-${{matrix.targetPlatform}}
          # path: build/${{matrix.targetPlatform}}
          # if-no-files-found: error
          # retention-days: 1
      
    
      # ############################
      # #          Cleanup         #
      # ############################ 
      # - name: Cleanup to avoid storage limit
        # if: always()
        # uses: geekyeggo/delete-artifact@v5
        # with:
          # name: buildBotAS
